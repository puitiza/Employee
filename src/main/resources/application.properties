#spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#=======================================================================================================================
### Database Server IP, Port Number and DB Name
    spring.datasource.url = jdbc:mysql://localhost:3306/test?useSSL=false&useJDBCComplaintTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useUnicode=true&createDatabaseIfNotExist=true&autoReconnect=true

### Database Server UserName
    spring.datasource.username = forceclose

### Database Server Password
    spring.datasource.password = 123456

#=======================================================================================================================
### This the simplest way to print the SQL queries though it doesn't log the parameters of prepared
#   statements and its is not recommended since its not such as optimized logging framework.

### to enable
    spring.jpa.show-sql = true

### logs the SQL queries
    logging.level.org.hibernate.SQL=DEBUG

### logs the prepared statement parameters
    logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

### to make the printing SQL beautify
    spring.jpa.properties.hibernate.format_sql=true

#=======================================================================================================================

### Recreate Model to DB updating

#   In development, it's often common to see developers use update to automatically modify the schema
#   to add new additions upon restart. But again understand, this doesn't remove a column or constraint
#   that may exist from previous executions

#   In production, it's often highly recommended you use none or simply don't specify this property.
#   That is because it's common practice for DBAs to review migration scripts for database changes

   spring.jpa.hibernate.ddl-auto = update

# ======================================================================================================================

### The SQL dialect makes Hibernate generate better SQL for the chosen database
    spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

# ======================================================================================================================

### Enable color from console
    spring.main.banner-mode=off
    spring.output.ansi.enabled=ALWAYS

# ======================================================================================================================

# Specification port and server to deploy
    #server.address=192.168.1.139
    #server.port=8018

# ======================================================================================================================

### OSIV (Open Session in View) is enabled by default in Spring Boot, and OSIV is really a bad idea
#   from a performance and scalability perspective.
    spring.jpa.open-in-view=false

# ======================================================================================================================

###Conexion from another service

app.users.client.url=http://localhost:8091

feign.client.config.default.connectTimeout= 5000
feign.client.config.default.readTimeout= 10000
feign.client.config.default.loggerLevel= basic

# ======================================================================================================================

### JavaMail Configuration

### The SMTP server to connect to.
    spring.mail.host=smtp.gmail.com

### The SMTP server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 25.
    spring.mail.port=587

### Default user name for SMTP.
    spring.mail.username=xxtonizhiitoxx@gmail.com

### Default user password for SMTP.
    spring.mail.password=myhouse5505207

### if true, attempt to authenticate the user usign the AUTH command. Defaults to false.
    spring.mail.properties.mail.smtp.auth=true

### If true, enables the use of the STARTTLS command (if supported by the server) to switch the connection to a
# TLS-protected connection before issuing any login commands. If the server does not support STARTTLS, the connection
# continues without the use of TLS; see the mail.smtp.starttls.required property to fail if STARTTLS isn't supported.
    spring.mail.properties.mail.smtp.starttls.enable=true

### Socket read timeout value in milliseconds. Default is infinite timeout
    spring.mail.properties.mail.smtp.timeout=8000

### SSL, post 465
    #spring.mail.protocol=smtps

### Specifies the default message access protocol
    #spring.mail.properties.mail.transport.protocol=smtps


# ======================================================================================================================